group 'tech.axelnilsson'
version '0.1'

buildscript {
    dependencies {
        classpath group: 'de.dynamicfiles.projects.gradle.plugins', name: 'javafx-gradle-plugin', version: '8.4.1'
    }

    repositories {
        mavenCentral()
    }
}

apply plugin: 'java'
apply plugin: 'jacoco'
apply plugin: 'javafx-gradle-plugin'

sourceCompatibility = 8

repositories {
    mavenCentral()
}

dependencies {
    testCompile group: 'junit', name: 'junit', version: '4.11'
    compile 'com.fasterxml.jackson.core:jackson-databind:2.0.1'
    testCompile "org.mockito:mockito-core:1.+"
    compile 'de.dynamicfiles.projects.gradle.plugins:javafx-gradle-plugin:8.4.1'
}

//jar.from configurations.compile.collect {zipTree it}
//
//jar.manifest {
//    attributes 'Main-Class': 'Main'
//}

jfx {
    verbose = true
    mainClass = "Main"
    jfxAppOutputDir = "build/bin/app/RSSReader"
    jfxMainAppJarName = "RSSReader.jar"
    deployDir = "src/main/deploy"

    // gradle jfxJar
    css2bin = false
    preLoader = null
    updateExistingJar = true
    allPermissions = true
    manifestAttributes = null // Map<String, String>
    addPackagerJar = true

    // gradle jfxNative
    identifier = null // setting this for windows-bundlers makes it possible to generate upgradeable installers (using same GUID)
    vendor = "Axel Nilsson"
    nativeOutputDir = "build/bin/native"
    bundler = "ALL" // set this to some specific, if your don't want all bundlers running, examples "windows.app", "jnlp", ...
    jvmProperties = [
            'prism.disableRegionCaching':'true'
    ] // Map<String, String>
    jvmArgs = [
            '-XX:+AggressiveOpts', '-XX:CompileThreshold=1'
    ] // List<String>
    userJvmArgs = null // Map<String, String>
    launcherArguments = null // List<String>
    nativeReleaseVersion = "0.1"
    needShortcut = false
    needMenu = false
    bundleArguments = null
    appName = "RSSReader" // this is used for files below "src/main/deploy", e.g. "src/main/deploy/windows/project.ico"
    additionalAppResources = null // path to some additional resources when creating application-bundle
    secondaryLaunchers = null
    fileAssociations = null // List<Map<String, Object>>
    noBlobSigning = false // when using bundler "jnlp", you can choose to NOT use blob signing

    skipNativeLauncherWorkaround124 = false
    skipNativeLauncherWorkaround167 = false
    skipJNLPRessourcePathWorkaround182 = false
    skipSigningJarFilesJNLP185 = false
    skipSizeRecalculationForJNLP185 = false

    //gradle jfxGenerateKeyStore
    keyStore = "src/main/deploy/keystore.jks"
    keyStoreAlias = "myalias"
    keyStorePassword = "password"
    keyPassword = null // will default to keyStorePassword
    keyStoreType = "jks"
    overwriteKeyStore = false

    certDomain = null // required
    certOrgUnit = null // defaults to "none"
    certOrg = null // required
    certState = null // required
    certCountry = null // required
}

jacocoTestReport {
    reports {
        xml.enabled true
        csv.enabled true
        html.destination "${buildDir}/jacocoHtml"
    }
}


//    jcenter()
//compile 'org.bitbucket.shemnon.javafxplugin:gradle-javafx-plugin:8.1.1'
//javafx {
//    appID 'RSSReader'
//    appName 'RSSReader'
//    mainClass 'Main'
//
//    jvmArgs = ['-XX:+AggressiveOpts', '-XX:CompileThreshold=1']
//    systemProperties = [ 'prism.disableRegionCaching':'true' ]
//    arguments = ['-l', '--fast']
//
//    embedLauncher = false
//
//    // deploy/info attributes
//    category = 'Application'
//    copyright = 'Copyright (c) 2016 Axnion'
//    description = 'This si just a test'
//    licenseType = 'Apache 2.0'
//    vendor = 'Axnion'
//    installSystemWide = true
//    menu = true
//    shortcut = true
//}