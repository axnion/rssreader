group 'tech.axelnilsson'
version '2.0'

buildscript {
    dependencies {
        classpath group: 'de.dynamicfiles.projects.gradle.plugins', name: 'javafx-gradle-plugin', version: '8.5.2'
    }

    repositories {
        mavenCentral()
    }
}

apply plugin: 'java'
apply plugin: 'jacoco'
apply plugin: 'javafx-gradle-plugin'

sourceCompatibility = 8

repositories {
    mavenCentral()
    maven { url "http://dl.bintray.com/jerady/maven" }
}

dependencies {
    testCompile group: 'junit', name: 'junit', version: '4.12'
    testCompile "org.mockito:mockito-core:1.10.19"

    compile 'de.dynamicfiles.projects.gradle.plugins:javafx-gradle-plugin:8.5.2'
    compile 'de.jensd:fontawesomefx-commons:8.11'
    compile 'de.jensd:fontawesomefx-controls:8.11'
    compile 'de.jensd:fontawesomefx-materialicons:2.1-2'
    compile group: 'org.xerial', name: 'sqlite-jdbc', version: '3.8.11.2'
    compile group: 'org.apache.commons', name: 'commons-io', version: '1.3.2'
    compile 'org.jsoup:jsoup:1.7.2'
}

jfx {
    verbose = true
    mainClass = "app.App"
    jfxAppOutputDir = "build/bin/app/RSSReader"
    jfxMainAppJarName = "RSSReader.jar"
    deployDir = "src/deploy/"

    // gradle jfxJar
    css2bin = true
    preLoader = null
    updateExistingJar = true
    allPermissions = true
    manifestAttributes = null // Map<String, String>
    addPackagerJar = true

    // gradle jfxNative
    identifier = 2.0 // setting this for windows-bundlers makes it possible to generate upgradeable installers (using same GUID)
    vendor = "axnion"
    nativeOutputDir = "build/bin/native"
    bundler = "ALL" // set this to some specific, if your don't want all bundlers running, examples "windows.app", "jnlp", ...
    jvmProperties = null // Map<String, String>
    jvmArgs = null // List<String>
    userJvmArgs = null // Map<String, String>
    launcherArguments = null // List<String>
    nativeReleaseVersion = "2.0"
    needShortcut = false
    needMenu = false
    bundleArguments = null
    appName = "RSSReader" // this is used for files below "src/main/deploy", e.g. "src/main/deploy/windows/project.ico"
    additionalAppResources = "src/deploy/resources" // path to some additional resources when creating application-bundle
    secondaryLaunchers = null
    fileAssociations = null // List<Map<String, Object>>
    noBlobSigning = false // when using bundler "jnlp", you can choose to NOT use blob signing

    skipNativeLauncherWorkaround124 = false
    skipNativeLauncherWorkaround167 = false
    skipJNLPRessourcePathWorkaround182 = false
    skipSigningJarFilesJNLP185 = false
    skipSizeRecalculationForJNLP185 = false

    //gradle jfxGenerateKeyStore
//    keyStore = "src/main/deploy/keystore.jks"
//    keyStoreAlias = "myalias"
//    keyStorePassword = "password"
//    keyPassword = null // will default to keyStorePassword
//    keyStoreType = "jks"
//    overwriteKeyStore = false
//
//    certDomain = null // required
//    certOrgUnit = null // defaults to "none"
//    certOrg = null // required
//    certState = null // required
//    certCountry = null // required
}

jacocoTestReport {
    reports {
        xml.enabled true
        html.enabled true
        html.destination "${buildDir}/jacocoHtml"
    }
}

check.dependsOn jacocoTestReport

task myRun(dependsOn: [
        clean,
        jfxNative,
        jfxRun,
])



task myTest(dependsOn: [
        clean,
        test,
        jacocoTestReport,
        javadoc
])

def myTasks = 'My tasks'
myRun.group = myTasks
myTest.group = myTasks